# =============================================================================
# AI-SPM Service Mesh Development - Docker Compose Override
# =============================================================================
# This Docker Compose override file simulates service mesh behavior in
# development environments, adding security headers and mesh-like networking.
# Use with: docker-compose -f docker-compose.yml -f docker-compose.service-mesh.yml up
# =============================================================================

version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # Service Mesh Proxy Simulator
  # ---------------------------------------------------------------------------
  # Simulates Istio gateway behavior for development
  service-mesh-proxy:
    image: nginx:alpine
    container_name: ai-spm-mesh-proxy
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx-mesh.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/ssl/certs:ro
    environment:
      - MESH_MODE=development
      - MTLS_ENABLED=true
    networks:
      - ai-spm-network
    depends_on:
      - api-gateway
    labels:
      - "ai-spm.service-mesh=proxy"
      - "ai-spm.security=mtls-termination"

  # ---------------------------------------------------------------------------
  # API Gateway with Service Mesh Configuration
  # ---------------------------------------------------------------------------
  api-gateway:
    environment:
      # Service mesh development configuration
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
      - TRACE_SAMPLING=1.0
      - MESH_PROXY_ENDPOINT=http://service-mesh-proxy:80
      
      # Add service mesh headers
      - SERVICE_MESH_HEADERS=true
      - DISTRIBUTED_TRACING=enabled
      
      # Service discovery with mesh awareness
      - AI_SCANNER_URL=http://ai-scanner:8001
      - DATA_INTEGRITY_URL=http://data-integrity:8002
      - WIZ_INTEGRATION_URL=http://wiz-integration:8003
      - COMPLIANCE_ENGINE_URL=http://compliance-engine:8004
      
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=frontend"
      - "ai-spm.security=mtls-ready"

  # ---------------------------------------------------------------------------
  # Python Microservices with Service Mesh Simulation
  # ---------------------------------------------------------------------------
  ai-scanner:
    environment:
      # Service mesh simulation
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
      - SERVICE_NAME=ai-scanner
      - SERVICE_VERSION=v1
      - TRACE_SAMPLING=1.0
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=microservice"
      - "ai-spm.service=ai-scanner"
      - "ai-spm.security=mtls-ready"

  data-integrity:
    environment:
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
      - SERVICE_NAME=data-integrity
      - SERVICE_VERSION=v1
      - TRACE_SAMPLING=1.0
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=microservice"
      - "ai-spm.service=data-integrity"
      - "ai-spm.security=mtls-ready"

  wiz-integration:
    environment:
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
      - SERVICE_NAME=wiz-integration
      - SERVICE_VERSION=v1
      - TRACE_SAMPLING=1.0
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=microservice"
      - "ai-spm.service=wiz-integration"
      - "ai-spm.security=mtls-ready"

  compliance-engine:
    environment:
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
      - SERVICE_NAME=compliance-engine
      - SERVICE_VERSION=v1
      - TRACE_SAMPLING=1.0
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=microservice"
      - "ai-spm.service=compliance-engine"
      - "ai-spm.security=mtls-ready"

  # ---------------------------------------------------------------------------
  # Database with Service Mesh Configuration
  # ---------------------------------------------------------------------------
  database:
    environment:
      # Service mesh database configuration
      - SERVICE_MESH_ENABLED=true
      - MESH_MODE=development
      - MTLS_MODE=PERMISSIVE
    labels:
      - "ai-spm.service-mesh=enabled"
      - "ai-spm.tier=data"
      - "ai-spm.service=database"
      - "ai-spm.security=mtls-ready"

  # ---------------------------------------------------------------------------
  # Observability Stack for Service Mesh Development
  # ---------------------------------------------------------------------------
  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ai-spm-jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
    environment:
      - COLLECTOR_ZIPKIN_HTTP_PORT=9411
      - QUERY_BASE_PATH=/jaeger
    networks:
      - ai-spm-network
    labels:
      - "ai-spm.observability=tracing"
      - "ai-spm.service-mesh=observability"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-spm-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-spm-network
    labels:
      - "ai-spm.observability=metrics"
      - "ai-spm.service-mesh=observability"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: ai-spm-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana-datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ai-spm-network
    depends_on:
      - prometheus
    labels:
      - "ai-spm.observability=visualization"
      - "ai-spm.service-mesh=observability"

# =============================================================================
# Additional Volumes for Service Mesh Development
# =============================================================================
volumes:
  grafana-storage:
    driver: local
    name: ai-spm-grafana-storage

# =============================================================================
# Usage Instructions:
# =============================================================================
#
# 1. Start with service mesh simulation:
#    docker-compose -f docker-compose.yml -f docker-compose.service-mesh.yml up --build
#
# 2. Access observability dashboards:
#    - Jaeger (tracing): http://localhost:16686
#    - Prometheus (metrics): http://localhost:9090
#    - Grafana (dashboards): http://localhost:3000 (admin/admin)
#    - Service Mesh Proxy: http://localhost:8080
#
# 3. Test service mesh behavior:
#    curl -H "X-Service-Mesh: true" http://localhost:8080/api/health
#
# 4. View service mesh headers in responses:
#    curl -I http://localhost:8080/api/health
#
# This configuration simulates Istio service mesh behavior for development
# and testing purposes before deploying to production Kubernetes with Istio.
# =============================================================================