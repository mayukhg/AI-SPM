AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Comprehensive CloudFormation template to deploy the AI Security Posture Management (AI-SPM) Platform
  with enterprise-grade monitoring, logging, and alerting capabilities. This template provisions advanced 
  security features including OAuth 2.0/SAML authentication, real-time security monitoring with SIEM 
  integration, AI/ML security controls, automated privacy governance, and a comprehensive observability 
  stack. Infrastructure includes VPC with encrypted RDS database, ECS Fargate services for the enhanced 
  Node.js API Gateway and specialized Python microservices, S3 bucket with security controls, CloudFront 
  distribution, integrated security services (CloudTrail, GuardDuty, Security Hub), structured logging 
  with Winston, Prometheus metrics collection, multi-channel alerting (Slack, PagerDuty, email, Teams), 
  KMS-encrypted log storage, and support for Istio service mesh deployment with zero-trust architecture, 
  automatic mTLS, and comprehensive observability. The platform provides enterprise-grade compliance 
  with 7-year audit trail retention and real-time threat detection monitoring.

Parameters:
  # ============================================================================
  # ENVIRONMENT CONFIGURATION
  # ============================================================================
  # Defines the deployment environment which affects resource sizing, logging
  # levels, and security configurations across the platform
  Environment:
    Type: String
    Default: production
    AllowedValues: [development, staging, production]
    Description: Deployment environment - affects resource sizing and security settings

  # ============================================================================
  # DATABASE CONFIGURATION
  # ============================================================================
  # PostgreSQL database configuration for the AI-SPM platform data storage
  # including user accounts, AI assets, vulnerabilities, and audit logs
  DBPassword:
    Type: String
    Description: Password for the RDS PostgreSQL database. Must be at least 12 characters with mixed case, numbers, and symbols.
    MinLength: 12
    NoEcho: true
    AllowedPattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{12,}$'

  DBInstanceClass:
    Type: String
    Default: db.t3.medium
    AllowedValues: [db.t3.medium, db.t3.large, db.r5.large, db.r5.xlarge]
    Description: RDS instance class with enhanced performance for security processing and large datasets

  # ============================================================================
  # SECURITY CONFIGURATION
  # ============================================================================
  # Cryptographic secrets for JWT tokens, session management, and API authentication
  # These are critical for platform security and should be randomly generated
  JWTSecret:
    Type: String
    Description: JWT secret for token signing (minimum 32 characters) - used for stateless authentication
    MinLength: 32
    NoEcho: true

  SessionSecret:
    Type: String
    Description: Session secret for authentication (minimum 32 characters) - used for session cookie signing
    MinLength: 32
    NoEcho: true

  APIKeySecret:
    Type: String
    Description: API key secret for service authentication (minimum 32 characters) - used for microservice communication
    MinLength: 32
    NoEcho: true

  # ============================================================================
  # AUTHENTICATION PROVIDER CONFIGURATION
  # ============================================================================
  # Enterprise Single Sign-On (SSO) integration parameters for OAuth 2.0 and SAML
  # These enable integration with corporate identity providers like Azure AD, Okta, etc.
  OAuthClientId:
    Type: String
    Description: (Optional) OAuth 2.0 Client ID for enterprise SSO integration (e.g., Azure AD, Google Workspace)
    Default: ""

  OAuthClientSecret:
    Type: String
    Description: (Optional) OAuth 2.0 Client Secret - keep this secure and rotate regularly
    Default: ""
    NoEcho: true

  SAMLEntityId:
    Type: String
    Description: (Optional) SAML Entity ID for identity federation - identifies this application to the IdP
    Default: ""

  SAMLCertificate:
    Type: String
    Description: (Optional) SAML IdP Certificate for signature verification - X.509 certificate in PEM format
    Default: ""
    NoEcho: true

  # ============================================================================
  # SIEM INTEGRATION CONFIGURATION
  # ============================================================================
  # Security Information and Event Management (SIEM) system integration
  # Enables real-time security event forwarding to enterprise security platforms
  SplunkEndpoint:
    Type: String
    Description: (Optional) Splunk HEC endpoint URL for SIEM integration (e.g., https://splunk.company.com:8088/services/collector)
    Default: ""

  SplunkToken:
    Type: String
    Description: (Optional) Splunk HEC authentication token - generate from Splunk admin console
    Default: ""
    NoEcho: true

  # External Security Integrations
  WizClientId:
    Type: String
    Description: (Optional) Wiz Security Platform Client ID
    Default: ""

  WizClientSecret:
    Type: String
    Description: (Optional) Wiz Security Platform Client Secret
    Default: ""
    NoEcho: true

  # ============================================================================
  # MONITORING AND ALERTING CONFIGURATION
  # ============================================================================
  # Multi-channel notification system for real-time incident response
  # Configure these channels based on your organization's communication preferences
  SlackWebhookUrl:
    Type: String
    Description: (Optional) Slack webhook URL for alert notifications - create from Slack app settings
    Default: ""
    NoEcho: true

  PagerDutyIntegrationKey:
    Type: String
    Description: (Optional) PagerDuty integration key for incident management - obtained from PagerDuty service configuration
    Default: ""
    NoEcho: true

  SmtpHost:
    Type: String
    Description: (Optional) SMTP server host for email notifications (e.g., smtp.gmail.com, smtp.office365.com)
    Default: ""

  SmtpPort:
    Type: Number
    Description: (Optional) SMTP server port - typically 587 for TLS, 465 for SSL, 25 for unencrypted
    Default: 587

  SmtpUser:
    Type: String
    Description: (Optional) SMTP username for email authentication - usually the email address
    Default: ""

  SmtpPassword:
    Type: String
    Description: (Optional) SMTP password for email authentication - use app-specific passwords for Gmail/Office365
    Default: ""
    NoEcho: true

  TeamsWebhookUrl:
    Type: String
    Description: (Optional) Microsoft Teams webhook URL for notifications - create from Teams channel connectors
    Default: ""
    NoEcho: true

  # ============================================================================
  # LOGGING CONFIGURATION
  # ============================================================================
  # Application logging settings that affect log verbosity and retention policies
  # Higher log levels (debug) increase storage costs but provide more troubleshooting detail
  LogLevel:
    Type: String
    Default: info
    AllowedValues: [debug, info, warn, error]
    Description: Application logging level - debug provides most detail, error provides least

  LogsRetentionDays:
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 365
    Description: Number of days to retain application logs - affects CloudWatch storage costs

  AuditRetentionYears:
    Type: Number
    Default: 7
    MinValue: 1
    MaxValue: 10
    Description: Number of years to retain audit logs for compliance (SOX, HIPAA, GDPR requirements)

  # ============================================================================
  # PERFORMANCE MONITORING CONFIGURATION
  # ============================================================================
  # System health monitoring intervals that balance monitoring granularity with resource usage
  # Shorter intervals provide faster detection but increase CPU/network overhead
  HealthCheckInterval:
    Type: Number
    Default: 30000
    MinValue: 10000
    MaxValue: 300000
    Description: Health check interval in milliseconds - how often to check system component health

  MetricsCollectionInterval:
    Type: Number
    Default: 15000
    MinValue: 5000
    MaxValue: 60000
    Description: Metrics collection interval in milliseconds - how often to gather Prometheus metrics

  AlertEscalationTimeout:
    Type: Number
    Default: 300000
    MinValue: 60000
    MaxValue: 1800000
    Description: Alert escalation timeout in milliseconds - time before escalating unacknowledged alerts

  # ============================================================================
  # CONTAINER CONFIGURATION
  # ============================================================================
  # Docker image tags for the application containers
  # Use specific version tags (e.g., "v1.2.3") for production deployments
  NodeJSImageTag:
    Type: String
    Description: Docker image tag for the enhanced Node.js API Gateway - use "latest" for development, specific versions for production
    Default: "latest"

  PythonImageTag:
    Type: String
    Description: Docker image tag for Python microservices - should match the API Gateway version for compatibility
    Default: "latest"

  # ============================================================================
  # NETWORKING CONFIGURATION
  # ============================================================================
  # VPC network configuration for secure private cloud deployment
  # This CIDR should not conflict with your existing corporate networks
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for VPC - provides 65,536 IP addresses for the AI-SPM platform

  # ============================================================================
  # SSL/TLS CONFIGURATION
  # ============================================================================
  # SSL certificate for HTTPS encryption - obtain from AWS Certificate Manager
  # Required for production deployments to ensure encrypted communication
  SSLCertificateArn:
    Type: String
    Description: ARN of SSL certificate for HTTPS (required for production) - create via AWS Certificate Manager

  # ============================================================================
  # AWS SECURITY SERVICES CONFIGURATION
  # ============================================================================
  # Enterprise security services that provide additional monitoring and compliance
  # These integrate with the platform's native security features
  EnableCloudTrail:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable AWS CloudTrail for comprehensive audit logging - recommended for compliance

  EnableGuardDuty:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable Amazon GuardDuty for threat detection - provides ML-based security analysis

  EnableSecurityHub:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable AWS Security Hub for security posture management - centralizes security findings

  # ============================================================================
  # OBSERVABILITY CONFIGURATION
  # ============================================================================
  # Advanced monitoring and tracing capabilities for production environments
  # These provide deep visibility into application performance and behavior
  EnablePrometheus:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable Prometheus metrics collection - industry standard for monitoring microservices

  EnableJaeger:
    Type: String
    Default: 'true'
    AllowedValues: ['true', 'false']
    Description: Enable Jaeger distributed tracing - essential for debugging microservices interactions

  APIGatewayDesiredCount:
    Type: Number
    Description: Desired number of tasks for the Node.js API Gateway service.
    Default: 2
    MinValue: 1

  MicroservicesDesiredCount:
    Type: Number
    Description: Desired number of tasks for each Python microservice.
    Default: 1
    MinValue: 1

  EnableMicroservices:
    Type: String
    Description: Whether to deploy Python microservices (true/false). Set to false for API Gateway only deployment.
    Default: "true"
    AllowedValues: ["true", "false"]

  ServiceMeshReady:
    Type: String
    Description: Whether to configure infrastructure for service mesh deployment (true/false).
    Default: "true"
    AllowedValues: ["true", "false"]

  KubernetesClusterName:
    Type: String
    Description: (Optional) Name of existing EKS cluster for service mesh deployment.
    Default: ""

# ============================================================================
# CONDITIONAL LOGIC
# ============================================================================
# These conditions determine which resources are created based on parameter values
# This allows for flexible deployments (e.g., API Gateway only vs. full microservices)
Conditions:
  # External service integration conditions - only create secrets if credentials provided
  CreateWizClientIdSecret: !Not [!Equals [!Ref WizClientId, ""]]
  CreateWizClientSecretSecret: !Not [!Equals [!Ref WizClientSecret, ""]]
  
  # SSL/TLS configuration - enables HTTPS listeners and CloudFront HTTPS
  HasSSLCertificate: !Not [!Equals [!Ref SSLCertificateArn, ""]]
  
  # Architecture deployment options - controls microservices vs. API Gateway only
  DeployMicroservices: !Equals [!Ref EnableMicroservices, "true"]
  EnableServiceMesh: !Equals [!Ref ServiceMeshReady, "true"]
  HasExistingCluster: !Not [!Equals [!Ref KubernetesClusterName, ""]]
  
  # AWS security service enablement - optional enterprise security features
  EnableCloudTrailService: !Equals [!Ref EnableCloudTrail, "true"]
  EnableGuardDutyService: !Equals [!Ref EnableGuardDuty, "true"]
  EnableSecurityHubService: !Equals [!Ref EnableSecurityHub, "true"]
  
  # Observability service enablement - monitoring and tracing capabilities
  EnablePrometheusService: !Equals [!Ref EnablePrometheus, "true"]
  EnableJaegerService: !Equals [!Ref EnableJaeger, "true"]
  
  # Notification channel configuration - determines which alert channels to configure
  HasSlackWebhook: !Not [!Equals [!Ref SlackWebhookUrl, ""]]
  HasPagerDutyKey: !Not [!Equals [!Ref PagerDutyIntegrationKey, ""]]
  HasSmtpConfig: !Not [!Equals [!Ref SmtpHost, ""]]
  HasTeamsWebhook: !Not [!Equals [!Ref TeamsWebhookUrl, ""]]
  
  # Authentication provider configuration - enables SSO integration
  HasOAuthConfig: !Not [!Equals [!Ref OAuthClientId, ""]]
  HasSAMLConfig: !Not [!Equals [!Ref SAMLEntityId, ""]]
  
  # SIEM integration configuration - enables security event forwarding
  HasSplunkConfig: !Not [!Equals [!Ref SplunkEndpoint, ""]]

# ============================================================================
# AWS RESOURCES
# ============================================================================

Resources:
  # ============================================================================
  # NETWORKING INFRASTRUCTURE
  # ============================================================================
  # Virtual Private Cloud (VPC) provides isolated network environment for the AI-SPM platform
  # This ensures secure communication between components and isolation from other AWS resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true      # Enables DNS resolution within the VPC
      EnableDnsHostnames: true    # Required for ECS Fargate and RDS connectivity
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-VPC

  # Internet Gateway provides internet access for public subnets
  # Required for NAT Gateways, ALB, and CloudFront integration
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Subnets - Two public and two private for high availability
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

  # NAT Gateways for private subnets
  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  AssociatePublicSubnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  AssociatePublicSubnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  AssociatePrivateSubnet1RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateRouteTable2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  AssociatePrivateSubnet2RouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # ============================================================================
  # IDENTITY AND ACCESS MANAGEMENT (IAM)
  # ============================================================================
  # IAM roles provide secure, temporary credentials for AWS services
  # These roles follow the principle of least privilege for enhanced security
  
  # ECS Task Execution Role - allows ECS to pull images and write logs
  # This role is used by the ECS service to manage container lifecycle
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # AWS managed policy for ECS task execution (ECR, CloudWatch Logs)
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # Application Server Role - provides runtime permissions for the AI-SPM containers
  # This role allows the application to access Secrets Manager and other required services
  AppServerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-AppServerRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-AppServerSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                # Restricts access to secrets created by this CloudFormation stack
                # This follows security best practices by limiting secret access scope
                Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${AWS::StackName}*
              # Additional permissions can be added here for other AWS services
              # Examples: S3 access for file uploads, SES for email notifications

  # Instance Profile for future EC2 deployments (currently unused with Fargate)
  # This resource is created for potential migration to EC2-based deployments
  AppServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-AppServerInstanceProfile
      Roles:
        - !Ref AppServerRole

  # ============================================================================
  # SECRETS MANAGEMENT
  # ============================================================================
  # AWS Secrets Manager provides secure storage for sensitive configuration data
  # All secrets are encrypted at rest and automatically rotated where possible
  
  # Database credentials for PostgreSQL RDS instance
  DBPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/DBPassword
      Description: "Database password for the AI-SPM application RDS instance"
      SecretString: !Ref DBPassword
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBPassword

  SessionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/SESSION_SECRET
      Description: "Session secret for the AI-SPM application"
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: 'sessionkey'
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SessionSecret

  WizClientIdSecret:
    Type: AWS::SecretsManager::Secret
    Condition: CreateWizClientIdSecret
    Properties:
      Name: !Sub ${AWS::StackName}/WIZ_CLIENT_ID
      Description: "Wiz Client ID for AI-SPM integration"
      SecretString: !Ref WizClientId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WizClientId

  WizClientSecretSecret:
    Type: AWS::SecretsManager::Secret
    Condition: CreateWizClientSecretSecret
    Properties:
      Name: !Sub ${AWS::StackName}/WIZ_CLIENT_SECRET
      Description: "Wiz Client Secret for AI-SPM integration"
      SecretString: !Ref WizClientSecret
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-WizClientSecret

  # ============================================================================
  # MONITORING AND ALERTING SECRETS
  # ============================================================================
  # Notification channel credentials for multi-channel alerting system
  # These secrets enable real-time incident response through various communication platforms
  
  # Slack integration for team notifications and incident collaboration
  SlackWebhookSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasSlackWebhook
    Properties:
      Name: !Sub ${AWS::StackName}/SLACK_WEBHOOK_URL
      Description: "Slack webhook URL for AI-SPM alert notifications"
      SecretString: !Ref SlackWebhookUrl
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SlackWebhook

  PagerDutySecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasPagerDutyKey
    Properties:
      Name: !Sub ${AWS::StackName}/PAGERDUTY_INTEGRATION_KEY
      Description: "PagerDuty integration key for AI-SPM incident management"
      SecretString: !Ref PagerDutyIntegrationKey
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PagerDutyKey

  SmtpPasswordSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasSmtpConfig
    Properties:
      Name: !Sub ${AWS::StackName}/SMTP_PASSWORD
      Description: "SMTP password for AI-SPM email notifications"
      SecretString: !Ref SmtpPassword
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SmtpPassword

  TeamsWebhookSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasTeamsWebhook
    Properties:
      Name: !Sub ${AWS::StackName}/TEAMS_WEBHOOK_URL
      Description: "Microsoft Teams webhook URL for AI-SPM notifications"
      SecretString: !Ref TeamsWebhookUrl
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-TeamsWebhook

  JWTSecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/JWT_SECRET
      Description: "JWT secret for AI-SPM token signing"
      SecretString: !Ref JWTSecret
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-JWTSecret

  APIKeySecretSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}/API_KEY_SECRET
      Description: "API key secret for AI-SPM service authentication"
      SecretString: !Ref APIKeySecret
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-APIKeySecret

  OAuthClientSecretSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasOAuthConfig
    Properties:
      Name: !Sub ${AWS::StackName}/OAUTH_CLIENT_SECRET
      Description: "OAuth 2.0 Client Secret for AI-SPM SSO integration"
      SecretString: !Ref OAuthClientSecret
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-OAuthClientSecret

  SAMLCertificateSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasSAMLConfig
    Properties:
      Name: !Sub ${AWS::StackName}/SAML_CERTIFICATE
      Description: "SAML IdP Certificate for AI-SPM identity federation"
      SecretString: !Ref SAMLCertificate
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SAMLCertificate

  SplunkTokenSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasSplunkConfig
    Properties:
      Name: !Sub ${AWS::StackName}/SPLUNK_TOKEN
      Description: "Splunk HEC authentication token for AI-SPM SIEM integration"
      SecretString: !Ref SplunkToken
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SplunkToken

  # RDS PostgreSQL Database
  AppServerSecurityGroup: # Defined first as RDSSecurityGroup refers to it
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-AppServerSecurityGroup
      GroupDescription: "Security group for the API Gateway (ECS Tasks/ALB)"
      VpcId: !Ref VPC
      # Ingress rules will be added for ALB (HTTP/HTTPS)
      # Egress to RDS will be implicitly allowed by RDS SG Ingress from this SG.
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppServerSG

  MicroservicesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: DeployMicroservices
    Properties:
      GroupName: !Sub ${AWS::StackName}-MicroservicesSecurityGroup
      GroupDescription: "Security group for Python Microservices"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8004
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
          Description: "Allow traffic from API Gateway to microservices"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MicroservicesSG

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for AI-SPM RDS instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-DBSubnetGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-RDSSecurityGroup
      GroupDescription: "Allow DB connections from AppServer"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppServerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSSG

  # ============================================================================
  # DATABASE INFRASTRUCTURE
  # ============================================================================
  # PostgreSQL database instance for AI-SPM platform data storage
  # Configured with security best practices and automated backups
  
  RDSPostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub ${AWS::StackName}-db-instance
      AllocatedStorage: "20"        # Minimum storage for development, scale up for production
      DBInstanceClass: db.t3.micro  # Cost-effective for development, use larger instances for production
      Engine: postgres
      EngineVersion: "14"           # PostgreSQL 14 with enhanced security features
      MasterUsername: ai_spm_user   # Database superuser for application access
      MasterUserPassword: !Ref DBPassword  # Secure password from parameters
      DBName: ai_spm_db            # Primary database for AI-SPM platform
      DBSubnetGroupName: !Ref DBSubnetGroup  # Deploys in private subnets only
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup    # Restricts access to application servers only
      PubliclyAccessible: false    # Security best practice - no internet access
      StorageType: gp2            # General Purpose SSD for balanced performance
      BackupRetentionPeriod: 7    # 7-day backup retention for point-in-time recovery
      DeleteAutomatedBackups: true # Clean up backups when instance is deleted
      DeletionPolicy: Snapshot # Or 'Delete' for non-prod. 'Snapshot' requires a final snapshot name.
      # FinalDBSnapshotIdentifier: !Sub ${AWS::StackName}-final-snapshot-${AWS::Region} # Required if DeletionPolicy is Snapshot
      CopyTagsToSnapshot: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-RDSInstance

  # ECR Repository for Node.js API Gateway
  ECRRepositoryNodeJS:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${AWS::StackName}/nodejs-api-gateway
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECRRepository-NodeJS

  # ECR Repository for Python Microservices
  ECRRepositoryPython:
    Type: AWS::ECR::Repository
    Condition: DeployMicroservices
    Properties:
      RepositoryName: !Sub ${AWS::StackName}/python-microservices
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep only last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECRRepository-Python

  # ============================================================================
  # CONTAINER ORCHESTRATION (ECS)
  # ============================================================================
  # Amazon ECS provides scalable container orchestration for the AI-SPM platform
  # Uses Fargate for serverless container management with automatic scaling
  
  # ECS Cluster - logical grouping of containerized services
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${AWS::StackName}-Cluster
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ECSCluster

  # ============================================================================
  # CONTAINER TASK DEFINITIONS
  # ============================================================================
  # Task definitions specify container configuration, resource requirements,
  # and environment variables for the AI-SPM platform services
  
  # Node.js API Gateway Task Definition - main application entry point
  APIGatewayTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-APIGateway
      Cpu: "512"                          # 0.5 vCPU - sufficient for API Gateway workload
      Memory: "1024"                      # 1 GB RAM - handles concurrent requests and monitoring
      NetworkMode: awsvpc                 # Required for Fargate, provides ENI per task
      RequiresCompatibilities:
        - FARGATE                         # Serverless container platform
      ExecutionRoleArn: !Ref ECSTaskExecutionRole  # Role for ECS to manage container lifecycle
      TaskRoleArn: !Ref AppServerRole     # Role for application to access AWS services
      ContainerDefinitions:
        - Name: !Sub ${AWS::StackName}-APIGateway
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryNodeJS}:${NodeJSImageTag}"
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: "5000"
            - Name: PGHOST
              Value: !GetAtt RDSPostgresInstance.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt RDSPostgresInstance.Endpoint.Port
            - Name: PGUSER
              Value: ai_spm_user
            - Name: PGDATABASE
              Value: ai_spm_db
            - Name: WIZ_CLIENT_ID
              Value: !If [CreateWizClientIdSecret, !Ref WizClientId, ""]
            - Name: WIZ_CLIENT_SECRET
              Value: !If [CreateWizClientSecretSecret, !Ref WizClientSecret, ""]
            - Name: AI_SCANNER_URL
              Value: !If [DeployMicroservices, !Sub "http://${AIServiceDiscovery}.${AWS::StackName}-microservices.local:8001", ""]
            - Name: DATA_INTEGRITY_URL
              Value: !If [DeployMicroservices, !Sub "http://${DataIntegrityServiceDiscovery}.${AWS::StackName}-microservices.local:8002", ""]
            - Name: WIZ_INTEGRATION_URL
              Value: !If [DeployMicroservices, !Sub "http://${WizIntegrationServiceDiscovery}.${AWS::StackName}-microservices.local:8003", ""]
            - Name: COMPLIANCE_ENGINE_URL
              Value: !If [DeployMicroservices, !Sub "http://${ComplianceEngineServiceDiscovery}.${AWS::StackName}-microservices.local:8004", ""]
            # Monitoring and Logging Configuration
            - Name: LOG_LEVEL
              Value: !Ref LogLevel
            - Name: LOGS_RETENTION_DAYS
              Value: !Ref LogsRetentionDays
            - Name: AUDIT_RETENTION_YEARS
              Value: !Ref AuditRetentionYears
            - Name: HEALTH_CHECK_INTERVAL
              Value: !Ref HealthCheckInterval
            - Name: METRICS_COLLECTION_INTERVAL
              Value: !Ref MetricsCollectionInterval
            - Name: ALERT_ESCALATION_TIMEOUT
              Value: !Ref AlertEscalationTimeout
            - Name: ENABLE_REQUEST_LOGGING
              Value: "true"
            - Name: ENABLE_PERFORMANCE_METRICS
              Value: "true"
            - Name: CORRELATION_ID_HEADER
              Value: "x-correlation-id"
            # SMTP Configuration
            - Name: SMTP_HOST
              Value: !If [HasSmtpConfig, !Ref SmtpHost, ""]
            - Name: SMTP_PORT
              Value: !If [HasSmtpConfig, !Ref SmtpPort, "587"]
            - Name: SMTP_USER
              Value: !If [HasSmtpConfig, !Ref SmtpUser, ""]
            # OAuth Configuration
            - Name: OAUTH_CLIENT_ID
              Value: !If [HasOAuthConfig, !Ref OAuthClientId, ""]
            # SAML Configuration
            - Name: SAML_ENTITY_ID
              Value: !If [HasSAMLConfig, !Ref SAMLEntityId, ""]
            # SIEM Configuration
            - Name: SPLUNK_ENDPOINT
              Value: !If [HasSplunkConfig, !Ref SplunkEndpoint, ""]
          Secrets:
            - Name: PGPASSWORD
              ValueFrom: !Ref DBPasswordSecret
            - Name: SESSION_SECRET
              ValueFrom: !Ref SessionSecret
            - Name: JWT_SECRET
              ValueFrom: !Ref JWTSecretSecret
            - Name: API_KEY_SECRET
              ValueFrom: !Ref APIKeySecretSecret
            - Name: SLACK_WEBHOOK_URL
              ValueFrom: !If [HasSlackWebhook, !Ref SlackWebhookSecret, !Ref "AWS::NoValue"]
            - Name: PAGERDUTY_INTEGRATION_KEY
              ValueFrom: !If [HasPagerDutyKey, !Ref PagerDutySecret, !Ref "AWS::NoValue"]
            - Name: SMTP_PASSWORD
              ValueFrom: !If [HasSmtpConfig, !Ref SmtpPasswordSecret, !Ref "AWS::NoValue"]
            - Name: TEAMS_WEBHOOK_URL
              ValueFrom: !If [HasTeamsWebhook, !Ref TeamsWebhookSecret, !Ref "AWS::NoValue"]
            - Name: OAUTH_CLIENT_SECRET
              ValueFrom: !If [HasOAuthConfig, !Ref OAuthClientSecretSecret, !Ref "AWS::NoValue"]
            - Name: SAML_CERTIFICATE
              ValueFrom: !If [HasSAMLConfig, !Ref SAMLCertificateSecret, !Ref "AWS::NoValue"]
            - Name: SPLUNK_TOKEN
              ValueFrom: !If [HasSplunkConfig, !Ref SplunkTokenSecret, !Ref "AWS::NoValue"]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref APIGatewayLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-gateway
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-APIGatewayTaskDefinition

  # ECS Task Definition for Python Microservices
  MicroservicesTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Condition: DeployMicroservices
    Properties:
      Family: !Sub ${AWS::StackName}-Microservices
      Cpu: "1024"  # 1 vCPU
      Memory: "2048" # 2 GB RAM
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref AppServerRole
      ContainerDefinitions:
        - Name: ai-scanner
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPython}:ai-scanner-${PythonImageTag}"
          PortMappings:
            - ContainerPort: 8001
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: PGHOST
              Value: !GetAtt RDSPostgresInstance.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt RDSPostgresInstance.Endpoint.Port
            - Name: PGUSER
              Value: ai_spm_user
            - Name: PGDATABASE
              Value: ai_spm_db
          Secrets:
            - Name: PGPASSWORD
              ValueFrom: !Ref DBPasswordSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MicroservicesLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ai-scanner
        - Name: data-integrity
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPython}:data-integrity-${PythonImageTag}"
          PortMappings:
            - ContainerPort: 8002
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: PGHOST
              Value: !GetAtt RDSPostgresInstance.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt RDSPostgresInstance.Endpoint.Port
            - Name: PGUSER
              Value: ai_spm_user
            - Name: PGDATABASE
              Value: ai_spm_db
          Secrets:
            - Name: PGPASSWORD
              ValueFrom: !Ref DBPasswordSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MicroservicesLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: data-integrity
        - Name: wiz-integration
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPython}:wiz-integration-${PythonImageTag}"
          PortMappings:
            - ContainerPort: 8003
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: PGHOST
              Value: !GetAtt RDSPostgresInstance.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt RDSPostgresInstance.Endpoint.Port
            - Name: PGUSER
              Value: ai_spm_user
            - Name: PGDATABASE
              Value: ai_spm_db
            - Name: WIZ_CLIENT_ID
              Value: !If [CreateWizClientIdSecret, !Ref WizClientId, ""]
            - Name: WIZ_CLIENT_SECRET
              Value: !If [CreateWizClientSecretSecret, !Ref WizClientSecret, ""]
          Secrets:
            - Name: PGPASSWORD
              ValueFrom: !Ref DBPasswordSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MicroservicesLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: wiz-integration
        - Name: compliance-engine
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPython}:compliance-engine-${PythonImageTag}"
          PortMappings:
            - ContainerPort: 8004
              Protocol: tcp
          Environment:
            - Name: ENVIRONMENT
              Value: production
            - Name: PGHOST
              Value: !GetAtt RDSPostgresInstance.Endpoint.Address
            - Name: PGPORT
              Value: !GetAtt RDSPostgresInstance.Endpoint.Port
            - Name: PGUSER
              Value: ai_spm_user
            - Name: PGDATABASE
              Value: ai_spm_db
          Secrets:
            - Name: PGPASSWORD
              ValueFrom: !Ref DBPasswordSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref MicroservicesLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: compliance-engine
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MicroservicesTaskDefinition

  # Log Group for API Gateway
  APIGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/api-gateway
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-APIGatewayLogGroup

  # Log Group for Python Microservices
  MicroservicesLogGroup:
    Type: AWS::Logs::LogGroup
    Condition: DeployMicroservices
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}/microservices
      RetentionInDays: 14
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MicroservicesLogGroup

  # ============================================================================
  # ENTERPRISE MONITORING LOG GROUPS
  # ============================================================================
  # Structured logging infrastructure with category-specific log groups
  # Each log group has appropriate retention periods and encryption for compliance
  
  # Security events log group - authentication, authorization, threat detection
  SecurityLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ai-spm/${AWS::StackName}/security
      RetentionInDays: !Ref LogsRetentionDays
      KmsKeyId: !Ref LogEncryptionKey  # Encrypted for security compliance
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-SecurityLogGroup
        - Key: LogType
          Value: Security

  # Compliance audit log group - immutable audit trails with 7-year retention
  AuditLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ai-spm/${AWS::StackName}/audit
      RetentionInDays: 2555  # 7 years (2555 days) for regulatory compliance (SOX, HIPAA, GDPR)
      KmsKeyId: !Ref LogEncryptionKey  # Required encryption for audit trails
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AuditLogGroup
        - Key: LogType
          Value: Audit
        - Key: Compliance
          Value: "true"

  # Performance metrics log group - API response times, database query performance
  PerformanceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ai-spm/${AWS::StackName}/performance
      RetentionInDays: !Ref LogsRetentionDays
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PerformanceLogGroup
        - Key: LogType
          Value: Performance

  # Agentic workflow log group - AI agent behavior, decision tracking, anomaly detection
  AgenticLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ai-spm/${AWS::StackName}/agentic
      RetentionInDays: !Ref LogsRetentionDays
      KmsKeyId: !Ref LogEncryptionKey  # Encrypted due to potential sensitive AI model data
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AgenticLogGroup
        - Key: LogType
          Value: Agentic

  # System monitoring log group - health checks, metrics collection, alerting events
  MonitoringLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ai-spm/${AWS::StackName}/monitoring
      RetentionInDays: !Ref LogsRetentionDays
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MonitoringLogGroup
        - Key: LogType
          Value: Monitoring

  # ============================================================================
  # ENCRYPTION INFRASTRUCTURE
  # ============================================================================
  # KMS key for encrypting sensitive log data at rest
  # This ensures compliance with data protection regulations and enterprise security standards
  LogEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: "KMS key for AI-SPM log encryption - protects sensitive security and audit data"
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          # Allow root account full access for key management
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action: "kms:*"
            Resource: "*"
          # Allow CloudWatch Logs service to use the key for encryption/decryption
          - Sid: Allow CloudWatch Logs
            Effect: Allow
            Principal:
              Service: !Sub "logs.${AWS::Region}.amazonaws.com"
            Action:
              - "kms:Encrypt"
              - "kms:Decrypt"
              - "kms:ReEncrypt*"
              - "kms:GenerateDataKey*"
              - "kms:DescribeKey"
            Resource: "*"
            Condition:
              ArnEquals:
                "kms:EncryptionContext:aws:logs:arn": !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*"
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-LogEncryptionKey

  # Human-readable alias for the KMS key
  LogEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub "alias/${AWS::StackName}-log-encryption"
      TargetKeyId: !Ref LogEncryptionKey

  # ECS Service for API Gateway
  APIGatewayService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub ${AWS::StackName}-APIGateway
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref APIGatewayTaskDefinition
      DesiredCount: !Ref APIGatewayDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref AppServerSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - TargetGroupArn: !Ref ALBTargetGroup
          ContainerName: !Sub ${AWS::StackName}-APIGateway
          ContainerPort: 5000
      HealthCheckGracePeriodSeconds: 60
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      ServiceRegistries:
        - RegistryArn: !GetAtt APIGatewayServiceDiscovery.Arn
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-APIGatewayService
    DependsOn:
      - ALBTargetGroup

  # ECS Service for Python Microservices
  MicroservicesService:
    Type: AWS::ECS::Service
    Condition: DeployMicroservices
    Properties:
      ServiceName: !Sub ${AWS::StackName}-Microservices
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref MicroservicesTaskDefinition
      DesiredCount: !Ref MicroservicesDesiredCount
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref MicroservicesSecurityGroup
          AssignPublicIp: DISABLED
      HealthCheckGracePeriodSeconds: 120
      DeploymentConfiguration:
        MinimumHealthyPercent: 50
        MaximumPercent: 200
      ServiceRegistries:
        - RegistryArn: !GetAtt AIServiceDiscovery.Arn
        - RegistryArn: !GetAtt DataIntegrityServiceDiscovery.Arn
        - RegistryArn: !GetAtt WizIntegrationServiceDiscovery.Arn
        - RegistryArn: !GetAtt ComplianceEngineServiceDiscovery.Arn
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-MicroservicesService

  # Service Discovery Namespace for Microservices
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Condition: DeployMicroservices
    Properties:
      Name: !Sub ${AWS::StackName}-microservices.local
      Vpc: !Ref VPC
      Description: Service discovery namespace for AI-SPM microservices

  # Service Discovery Services
  APIGatewayServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      Name: api-gateway
      NamespaceId: !If [DeployMicroservices, !Ref ServiceDiscoveryNamespace, !Ref "AWS::NoValue"]
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
        NamespaceId: !If [DeployMicroservices, !Ref ServiceDiscoveryNamespace, !Ref "AWS::NoValue"]
      HealthCheckCustomConfig:
        FailureThreshold: 1

  AIServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Condition: DeployMicroservices
    Properties:
      Name: ai-scanner
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
        NamespaceId: !Ref ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  DataIntegrityServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Condition: DeployMicroservices
    Properties:
      Name: data-integrity
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
        NamespaceId: !Ref ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  WizIntegrationServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Condition: DeployMicroservices
    Properties:
      Name: wiz-integration
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
        NamespaceId: !Ref ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  ComplianceEngineServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Condition: DeployMicroservices
    Properties:
      Name: compliance-engine
      NamespaceId: !Ref ServiceDiscoveryNamespace
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 10
        NamespaceId: !Ref ServiceDiscoveryNamespace
      HealthCheckCustomConfig:
        FailureThreshold: 1

  # S3 Bucket for Frontend Static Assets
  S3FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-frontend-assets-${AWS::AccountId}-${AWS::Region} # Globally unique bucket name
      AccessControl: Private # Recommended: Use OAC with CloudFront instead of public bucket
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      WebsiteConfiguration: # Optional if only accessed via CloudFront OAC
        IndexDocument: index.html
        ErrorDocument: index.html # For SPAs, redirect errors to index.html
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-FrontendS3Bucket
    # DeletionPolicy: Retain # Recommended for production buckets
    # UpdateReplacePolicy: Retain

  # S3BucketPolicy: # We will use Origin Access Control (OAC) with CloudFront, so a public bucket policy is not preferred.
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Ref S3FrontendBucket
  #     PolicyDocument:
  #       Statement:
  #         - Sid: PublicReadGetObjectForCloudFront
  #           Effect: Allow
  #           Principal:
  #             AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity EEXAMPLE # Replace with OAI if used
  #           Action: s3:GetObject
  #           Resource: !Sub arn:aws:s3:::${S3FrontendBucket}/*

  # CloudFront Distribution
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-S3-OAC
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub Distribution for ${AWS::StackName}
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: !Sub S3-${S3FrontendBucket} # S3 Origin
            DomainName: !GetAtt S3FrontendBucket.RegionalDomainName # Use regional domain name for S3
            S3OriginConfig:
              OriginAccessIdentity: "" # Required to be empty string when using OAC
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
          # ALB Origin for API will be added later if we create a combined distribution.
          # For now, focusing on S3 frontend.
          # - Id: !Sub ALB-${AWS::StackName}
          #   DomainName: !GetAtt ApplicationLoadBalancer.DNSName # ALB DNS
          #   CustomOriginConfig:
          #     HTTPPort: 80
          #     HTTPSPort: 443
          #     OriginProtocolPolicy: http-only # or https-only if ALB listener is HTTPS
        DefaultCacheBehavior:
          TargetOriginId: !Sub S3-${S3FrontendBucket}
          ViewerProtocolPolicy: redirect-to-https # Recommended
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          DefaultTTL: 86400 # 1 day
          MaxTTL: 31536000 # 1 year
          MinTTL: 0
        # Add CacheBehavior for API path /api/* to route to ALB later if needed
        # - PathPattern: /api/*
        #   TargetOriginId: !Sub ALB-${AWS::StackName} # ALB Origin ID
        #   ViewerProtocolPolicy: redirect-to-https
        #   AllowedMethods: ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT']
        #   CachedMethods: ['HEAD', 'OPTIONS'] # Cache OPTIONS for preflight
        #   Compress: true
        #   ForwardedValues:
        #     QueryString: true
        #     Headers: # Forward necessary headers for API
        #       - Authorization
        #       - Content-Type
        #     Cookies:
        #       Forward: all
        #   DefaultTTL: 0
        #   MaxTTL: 0
        #   MinTTL: 0
        ViewerCertificate: !If
          - HasSSLCertificate
          - ViewerCertificate:
              AcmCertificateArn: !Ref SSLCertificateArn
              SslSupportMethod: sni-only
              MinimumProtocolVersion: TLSv1.2_2021
          - ViewerCertificate: # Default to CloudFront owned certificate
              CloudFrontDefaultCertificate: true
        # Logging: # Optional: Configure access logging
        #   Bucket: your-logging-bucket.s3.amazonaws.com
        #   Prefix: !Sub ${AWS::StackName}/cloudfront-logs/
        #   IncludeCookies: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-CloudFrontDistribution

  S3BucketPolicyForCloudFrontOAC:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref S3FrontendBucket
      PolicyDocument:
        Version: "2012-10-17" # AWS recommends using "2012-10-17" or newer
        Statement:
          - Sid: AllowCloudFrontServicePrincipalReadOnly
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${S3FrontendBucket}/*
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  # Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-ALBSecurityGroup
      GroupDescription: "Allow HTTP/HTTPS to ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBSG

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${AWS::StackName}-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALB

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${AWS::StackName}-AppTargetGroup
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 5000 # Port the ECS tasks are listening on
      HealthCheckPath: /api/health # Placeholder - ensure your app has a health check endpoint
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      TargetType: ip # For Fargate
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ALBTG
    DependsOn: # Ensure AppServerSecurityGroup is created before target group tries to use it implicitly for health checks
      - AppServerSecurityGroup

  # Listener for HTTP (redirects to HTTPS if SSL cert is provided)
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - !If # If SSL cert exists, redirect HTTP to HTTPS, else forward to ECS for API (or fixed response if no API default)
          - HasSSLCertificate
          - Type: redirect
            RedirectConfig:
              Protocol: HTTPS
              Port: "443"
              StatusCode: HTTP_301
          - Type: forward # If no SSL, forward /api/* to ECS, default might be fixed response
            TargetGroupArn: !Ref ALBTargetGroup # This default action might need adjustment based on actual domain strategy
            # Or, for a scenario where CloudFront is the entry point, this listener might only have specific rules
            # and no general default forward to ECS.
            # Let's assume for now API is the primary purpose of ALB.

  # Listener for HTTPS (conditional)
  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: HasSSLCertificate # Only create if SSLCertificateArn is provided
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref SSLCertificateArn
      SslPolicy: ELBSecurityPolicy-2016-08 # Choose an appropriate SSL policy
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup # Default to forwarding to the App server for API traffic

  # Update AppServerSecurityGroup to allow traffic from ALB
  AppServerSecurityGroupIngressFromALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AppServerSecurityGroup
      IpProtocol: tcp
      FromPort: 5000 # ECS Task port
      ToPort: 5000
      SourceSecurityGroupId: !Ref ALBSecurityGroup # Allow from ALB's SG

# ============================================================================
# STACK OUTPUTS
# ============================================================================
# CloudFormation outputs provide key resource information for integration
# and operational monitoring. These values are exported for cross-stack references.

Outputs:
  # ============================================================================
  # APPLICATION ACCESS ENDPOINTS
  # ============================================================================
  # Primary access points for the AI-SPM platform web interface and APIs
  
  # CloudFront Distribution URL - primary entry point for end users
  CloudFrontURL:
    Description: "CloudFront Distribution URL for the AI-SPM Platform web interface"
    Value: !Sub "https://${CloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub ${AWS::StackName}-CloudFrontURL

  # Application Load Balancer URL
  ALBEndpoint:
    Description: "Application Load Balancer endpoint for API access"
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
    Export:
      Name: !Sub ${AWS::StackName}-ALBEndpoint

  # ECR Repository URIs
  ECRRepositoryNodeJSURI:
    Description: "ECR Repository URI for Node.js API Gateway images"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryNodeJS}"
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryNodeJS

  ECRRepositoryPythonURI:
    Condition: DeployMicroservices
    Description: "ECR Repository URI for Python Microservices images"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepositoryPython}"
    Export:
      Name: !Sub ${AWS::StackName}-ECRRepositoryPython

  # S3 Bucket for Frontend Assets
  S3FrontendBucketName:
    Description: "S3 Bucket name for frontend static assets"
    Value: !Ref S3FrontendBucket
    Export:
      Name: !Sub ${AWS::StackName}-S3FrontendBucket

  # Database Information
  DatabaseEndpoint:
    Description: "RDS PostgreSQL Database endpoint"
    Value: !GetAtt RDSPostgresInstance.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseEndpoint

  DatabasePort:
    Description: "RDS PostgreSQL Database port"
    Value: !GetAtt RDSPostgresInstance.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DatabasePort

  # ECS Cluster Information
  ECSClusterName:
    Description: "ECS Cluster name for the AI-SPM Platform"
    Value: !Ref ECSCluster
    Export:
      Name: !Sub ${AWS::StackName}-ECSCluster

  # API Gateway Service Information
  APIGatewayServiceName:
    Description: "ECS Service name for the Node.js API Gateway"
    Value: !Ref APIGatewayService
    Export:
      Name: !Sub ${AWS::StackName}-APIGatewayService

  # Microservices Service Information
  MicroservicesServiceName:
    Condition: DeployMicroservices
    Description: "ECS Service name for Python Microservices"
    Value: !Ref MicroservicesService
    Export:
      Name: !Sub ${AWS::StackName}-MicroservicesService

  # Service Discovery Information
  ServiceDiscoveryNamespace:
    Condition: DeployMicroservices
    Description: "Service Discovery namespace for microservices communication"
    Value: !Ref ServiceDiscoveryNamespace
    Export:
      Name: !Sub ${AWS::StackName}-ServiceDiscoveryNamespace

  # Architecture Information
  ArchitectureType:
    Description: "Architecture type deployed"
    Value: !Sub 
      - "${BaseArch} ${ServiceMeshSuffix}"
      - BaseArch: !If [DeployMicroservices, "Hybrid Microservices (Node.js + Python)", "API Gateway Only (Node.js)"]
        ServiceMeshSuffix: !If [EnableServiceMesh, "with Service Mesh Ready Infrastructure", ""]
    Export:
      Name: !Sub ${AWS::StackName}-ArchitectureType

  # ============================================================================
  # MONITORING AND SECURITY RESOURCES
  # ============================================================================
  # Enterprise monitoring infrastructure and security service identifiers
  
  # KMS encryption key for secure log storage
  LogEncryptionKeyId:
    Description: "KMS Key ID for log encryption - used to encrypt sensitive audit and security logs"
    Value: !Ref LogEncryptionKey
    Export:
      Name: !Sub ${AWS::StackName}-LogEncryptionKey

  SecurityLogGroupName:
    Description: "CloudWatch Log Group for security events"
    Value: !Ref SecurityLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityLogGroup

  AuditLogGroupName:
    Description: "CloudWatch Log Group for audit trails (7-year retention)"
    Value: !Ref AuditLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-AuditLogGroup

  PerformanceLogGroupName:
    Description: "CloudWatch Log Group for performance metrics"
    Value: !Ref PerformanceLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-PerformanceLogGroup

  AgenticLogGroupName:
    Description: "CloudWatch Log Group for agentic workflow events"
    Value: !Ref AgenticLogGroup
    Export:
      Name: !Sub ${AWS::StackName}-AgenticLogGroup

  MonitoringConfigurationSummary:
    Description: "Summary of monitoring and alerting configuration"
    Value: !Sub
      - |
        Enterprise Monitoring & Alerting Configured:
        
        Logging Infrastructure:
        - Security Events: ${SecurityLogGroup}
        - Audit Trails: ${AuditLogGroup} (7-year retention)
        - Performance Metrics: ${PerformanceLogGroup}
        - Agentic Workflows: ${AgenticLogGroup}
        - System Monitoring: ${MonitoringLogGroup}
        
        Alerting Channels:
        ${SlackStatus}
        ${PagerDutyStatus}
        ${EmailStatus}
        ${TeamsStatus}
        
        Configuration:
        - Log Level: ${LogLevel}
        - Health Check Interval: ${HealthCheckInterval}ms
        - Metrics Collection: ${MetricsCollectionInterval}ms
        - Alert Escalation: ${AlertEscalationTimeout}ms
        
        Encryption: All logs encrypted with KMS key ${LogEncryptionKey}
      - SlackStatus: !If [HasSlackWebhook, "✓ Slack notifications enabled", "- Slack notifications: Not configured"]
        PagerDutyStatus: !If [HasPagerDutyKey, "✓ PagerDuty integration enabled", "- PagerDuty integration: Not configured"]
        EmailStatus: !If [HasSmtpConfig, "✓ Email notifications enabled", "- Email notifications: Not configured"]
        TeamsStatus: !If [HasTeamsWebhook, "✓ Microsoft Teams notifications enabled", "- Teams notifications: Not configured"]
    Export:
      Name: !Sub ${AWS::StackName}-MonitoringConfiguration

  # Deployment Instructions
  DeploymentNotes:
    Description: "Important deployment information"
    Value: !Sub 
      - |
        Deployment completed successfully!
        
        Architecture: ${ArchType}
        Service Mesh: ${ServiceMeshStatus}
        Monitoring: Enterprise-grade logging and alerting configured
        
        Next Steps:
        1. Build and push Node.js API Gateway image to: ${ECRRepositoryNodeJS}
        ${MicroserviceInstructions}
        2. Upload frontend assets to S3 bucket: ${S3FrontendBucket}
        3. Access application via CloudFront: https://${CloudFrontDistribution.DomainName}
        
        Monitoring Endpoints:
        - Health Check: /api/monitoring/health
        - Metrics: /api/monitoring/metrics (Prometheus format)
        - Alerts: /api/monitoring/alerts
        
        ${ServiceMeshInstructions}
        
        For service mesh deployment:
        1. Deploy to EKS cluster: kubectl apply -f k8s/
        2. Install Istio: ./deploy/service-mesh-deployment.sh deploy
        3. Configure mTLS and authorization policies
        
        ${DiscoveryNotes}
      - ArchType: !If [DeployMicroservices, "Hybrid Microservices", "API Gateway Only"]
        ServiceMeshStatus: !If [EnableServiceMesh, "Ready for Istio deployment", "Standard deployment"]
        MicroserviceInstructions: !If [DeployMicroservices, !Sub "2. Build and push Python microservices images to: ${ECRRepositoryPython}", ""]
        ServiceMeshInstructions: !If [EnableServiceMesh, "Infrastructure configured for service mesh with mTLS support.", ""]
        DiscoveryNotes: !If [DeployMicroservices, "Microservices will be discoverable via internal DNS in the VPC.", ""]
    Export:
      Name: !Sub ${AWS::StackName}-DeploymentNotes
